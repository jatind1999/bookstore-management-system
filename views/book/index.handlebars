<!-- views/book/index.handlebars -->
<div class="container mt-4">
    <h2 class="mb-4">Books</h2>

    {{#each books}}
        <div class="card mb-3">
            <div class="card-body">
                <h5 class="card-title">{{this.title}}</h5>
                <p class="card-text">Author: {{this.author}}</p>
                <p class="card-text">Genre: {{this.genre}}</p>
                <p class="card-text">Price: ${{this.price}}</p>
                <p class="card-text">Quantity: {{this.quantity}}</p>

                {{#if ../isAdmin}}
                    <!-- Update Form -->
                    <form id="updateForm{{this._id}}" data-id="{{this._id}}">
                        <div class="mb-3">
                            <label for="updateTitle" class="form-label">Title:</label>
                            <input type="text" class="form-control" id="updateTitle" name="title" value="{{this.title}}" required>
                        </div>
                        <div class="mb-3">
                            <label for="updateAuthor" class="form-label">Author:</label>
                            <input type="text" class="form-control" id="updateAuthor" name="author" value="{{this.author}}" required>
                        </div>
                        <div class="mb-3">
                            <label for="updateGenre" class="form-label">Genre:</label>
                            <input type="text" class="form-control" id="updateGenre" name="genre" value="{{this.genre}}" required>
                        </div>
                        <div class="mb-3">
                            <label for="updatePrice" class="form-label">Price:</label>
                            <input type="number" class="form-control" id="updatePrice" name="price" value="{{this.price}}" required>
                        </div>
                        <div class="mb-3">
                            <label for="updateQuantity" class="form-label">Quantity:</label>
                            <input type="number" class="form-control" id="updateQuantity" name="quantity" value="{{this.quantity}}" required>
                        </div>
                        <button type="submit" class="btn btn-warning">Update</button>
                    </form>
                    <a href="#" class="btn btn-danger btn-delete" data-id="{{this._id}}">Delete</a>
                {{/if}}
            </div>
        </div>
    {{/each}}
<script>
    document.addEventListener('submit', function (event) {
        event.preventDefault();
        const form = event.target;
        const bookId = form.dataset.id;

        // Check if the form belongs to the update modal
        if (form.id.startsWith('updateForm')) {
            const formData = new FormData(form);
            const token = getAuthToken(); // Replace with your function to retrieve the auth token

            fetch(`/books/${bookId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`,
                },
                body: JSON.stringify(Object.fromEntries(formData)),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                // Handle success, e.g., close the modal or update the UI
                $('#updateModal' + bookId).modal('hide');
            })
            .catch(error => {
                console.error('Fetch error:', error);
                // Handle error, e.g., show an error message to the user
            });
        }
    });

    document.addEventListener('click', function (event) {
        const deleteButton = event.target.closest('.btn-delete');
        if (deleteButton) {
            event.preventDefault(); // Prevent the default link behavior
            const bookId = deleteButton.dataset.id;
            const token = getAuthToken();

            if (confirm('Are you sure you want to delete this book?')) {
                fetch(`/books/${bookId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    // Handle success, e.g., update the UI
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                    // Handle error, e.g., show an error message to the user
                });
            }
        }
    });


    // Function to retrieve the auth token from cookies or localStorage
    function getAuthToken() {
        // Replace with your logic to retrieve the auth token
        return document.cookie.split('; ').find(row => row.startsWith('authToken=')).split('=')[1];
    }
</script>

</div>
